September 2013

Anne Thessen was funded as an independent contractor to gather data from the Botanical 
Museum Berlin collections in Europeana using their API. The data were to be delivered in 
DwC-A format.

1. Get a key from Europeana. Every API user needs one.

2. Find out the ID number for the collection of interest. Botanical Museum Berlin is 11605

3. Make a list of numbers that increment in the maximum number of records that the 
Europeana API will allow to be called at one time (100). I use query_rows_150000.txt. 
A new query_row file can be generated using generate_query_rows.py.

3. Use europeana_api_1.py to get a list of identification numbers for each record 
contained in the collection of interest. The output is europeana_ids.txt. You won't have 
to do this again, unless more records are added to the collection.

4. Use europeana_api_2.py to access the metadata for each record. The API only allows
10,000 queries per day for each user. I broke up the list of record ids 
(europeana_berlin_ids.txt) into smaller jobs in the file europeana_ids_job.txt. This returns a 
tab separated file europ_metadata.txt. After each run, I copied and pasted the results into 
europ_metadata_final.txt.

5. europ_metadata_final.txt was opened in excel. The names were deduped to get the core list 
for the DwC-A file. This is europeana_taxon_list_berlin.txt. Be sure to open the taxon list in a 
text editor after deduping and change the end of line characters to Unix LF. You should 
also remove all single apostrophes and quotation marks before making the dictionary or it 
will screw with your formatting. You don't have to do this unless you are recreating the 
core DwC-A file or the dictionary.

6. Use europeana_api_3.py to generate the core DwC-A file from the taxon list - essentially
assigning an ID to each taxon name.

7. Use taxon_list_to_dict.py to generate a dictionary out of the 
europeana_taxon_list_berlin.txt file. This will help europeana_api_4.py look up the taxon 
ID numbers when generating the media extension file. You will have to deal with 
apostrophes in people's names.

The access_uri that europeana returns is a link to a jpg in a viewer provided by the 
herbarium. EOL needs a direct link to the jpg. Use jpg_url.py to transform europ_metadata_final.txt
to europ_metadata_newurl.txt. jpg_url.py only changes the access_uri. While debugging 
jpg_url.py I found 29 images that have a large number of Xs in the specimen number. There
doesn't appear to be a direct link to the image through the herbarium. One image with 
"indet" listed as the taxon was removed.

7. Use europeana_api_4.py to generate the media extension file (europ_media_berlin.txt).

8. At this point, all the bits are finished. Have a look over the files and fix any 
errors. Create the meta file. Then zip them together and run them through the validator. 
Fix any issues the validator finds.